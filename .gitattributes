from datetime import date

class PersonalFinanceManager:
   """Manages personal finance records.
   Attributes:
        expenses (list of dict): A list where each entry is a dictionary representing an expense record.
        incomes (list of dict): A list where each entry is a dictionary representing an income record.
        budgets (dict): A dictionary to store budget information, not yet implemented.
    """
   def __init__(self):
        """Initializes a PFM instance with empty records."""

        self.expenses = []
        self.incomes = []
        self.budgets = {}
        self.savings_goals = {}
     
   def log_expense(self, amount, name, category): #2
      """Logs a new expense record.

      Args:
            amount (float): The amount of money spent.
            name (str): The name or description of the expense.
            category (str): The category of the expense.
      """
      self.expenses.append({'date': date.today(), 'amount': amount, 'name': name, 'category': category})

   def log_income(self, amount, name, source):
        """Logs a new income record.

        Args:
            amount (float): The amount of money earned.
            name (str): The name or description of the income.
            source (str): The source or origin of the income.
        """
        self.incomes.append({'date': date.today(), 'amount': amount, 'name': name, 'source': source})

   def get_financial_summary(self, currency_rate=1): #3
        """Calculates the total expenses, total income, and net profit/loss.
        Parameters:
             currency_rate (float, optional): The currency exchange rate for conversion. Defaults to 1.
         Returns:
             tuple: A tuple containing total expenses, total income, and net profit/loss.
        """
        total_expenses = sum(expense['amount'] * currency_rate for expense in self.expenses)
        total_income = sum(income['amount'] * currency_rate for income in self.incomes)
        net = total_income - total_expenses
        return total_expenses, total_income, net

   def add_budget (self, category, amount): #4
         """Adds or updates a budget for a given category.
         Parameters:
             category (str): The category for the budget.
             amount (float): The budget amount.
         """
         self.budgets[category] = amount

   def update_budget(self, category, new_amount):
         """Updates the budget amount for a specific category.
         Parameters:
             category (str): The category to update.
             new_amount (float): The new budget amount.
         """
         if category in self.budgets:
            self.budgets[category] = new_amount
         else:
            print(f"No budget set for {category}.")
 
   def delete_record (self, record_type, name):
      """Deletes a record based on its type and name.
         Parameters:
             record_type (str): The type of record ('expense' or 'income').
             name (str): The name of the record to delete.
      """
      if record_type == 'expense':
         self.expenses = [expense for expense in self.expenses if expense['name'] != name]
      elif record_type == 'income' :
           self.incomes = [income for income in self.incomes if income['name'] != name]
      else:
          print("invalid  record type.")

   @classmethod
   def input_expenses(cls, pfm): #5
       """Prompts the user to input expenses and logs them."""
       while True:
            name = input("Enter the name of the expense? If nothing, (type 'NOTHING' to stop): ")
            if name.upper() == "NOTHING":
                break
            try:
               amount = float(input(f"How much was {name}? "))
               category = input("Enter the category: ")
               pfm.log_expense (amount, name, category)
            except ValueError:
               print ("please enter a valid amount!")

   @classmethod
   def input_income(cls, pfm): #5
        """Logs an income record from user input.

        Args:
            pfm (PersonalFinanceManager): The instance of PFM to log income to.
        """
        while True:
            name = input("Enter the name of the income (type 'NOTHING' to stop): ")
            if name.upper() == "NOTHING":
                break
            try:
                amount = float(input(f"How much was {name}? "))
                source = input("What was the source of the income? ")
                pfm.log_income(amount, name, source)
            except ValueError:
                print("Please enter a valid amount.")

   @staticmethod
   def view_financial_summary(pfm): #6
        """Prints a financial summary including total expenses, total income, and net profit/loss.

        Args:
            pfm (PersonalFinanceManager): The instance of PFM to summarize.
        """
        total_expenses, total_income, net = pfm.get_financial_summary()
        net = total_income - total_expenses
        print(f"\nTotal Expenses: {total_expenses}")
        print(f"Total Income: {total_income}")
        print(f"Net Profit/Loss: {net}")

   @staticmethod
   def manage_budget(pfm):
        """
        Manage budgets by adding or updating budget amounts for categories.

        Parameters:
        - pfm (PersonalFinanceManager): The PersonalFinanceManager instance to manage budgets.
        """
        while True:
            print("\nBudget Management")
            print("1. Add Budget")
            print("2. Update Budget")
            print("3. Back to Main Menu")

            choice = input("Select an option: ")

            if choice == "1":
                category = input("Enter the category: ")
                amount = float(input("Enter the budget amount: "))
                pfm.add_budget(category, amount)
            elif choice == "2":
                category = input("Enter the category to update: ")
                amount = float(input("Enter the new budget amount: "))
                pfm.update_budget(category, amount)
            elif choice == "3":
                break
            else:
                print("Invalid option. Please try again.")

   @staticmethod
   def manage_records(pfm):
        """
        Manage records by deleting expenses or incomes based on the name.

        Parameters:
        - pfm (PersonalFinanceManager): The PersonalFinanceManager instance to manage records.
        """
        while True:
            print("\nRecord Management")
            print("1. Delete Expense")
            print("2. Delete Income")
            print("3. Back to Main Menu")

            choice = input("Select an option: ")

            if choice == "1":
                name = input("Enter the name of the expense to delete: ")
                pfm.delete_record('expense', name)
            elif choice == "2":
                name = input("Enter the name of the income to delete: ")
                pfm.delete_record('income', name)
            elif choice == "3":
                break
            else:
                print("Invalid option. Please try again.")
def main():
    """Main function to run the Personal Finance Manager."""
    pfm = PersonalFinanceManager()

    while True:
        print("\nPersonal Finance Manager")
        print("1. Log Expense")
        print("2. Log Income")
        print("3. View Financial Summary")
        print("4. View Expenses by Category")
        print("5. Manage Budget")
        print("6. Manage Records")
        print("7. Exit")

        choice = input("Select an option: ")

        if choice == "1":
            PersonalFinanceManager.input_expenses(pfm)
        elif choice == "2":
            PersonalFinanceManager.input_income(pfm)
        elif choice == "3":
            PersonalFinanceManager.view_financial_summary(pfm)
        elif choice == "4":
            PersonalFinanceManager.view_expenses_by_category(pfm)
        elif choice == "5":
            PersonalFinanceManager.manage_budget(pfm)
        elif choice == "6":
            PersonalFinanceManager.manage_records(pfm)
        elif choice == "7":
            break
        else:
            print("Invalid option. Please try again.")
if __name__ == "__main__":
    main() 
